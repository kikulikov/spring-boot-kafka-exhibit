logging.level.root: INFO

application.topic.online-orders: online-orders
application.topic.count-and-total: count-and-total
application.topic.default-num-partitions: 5

#spring.kafka.properties.bootstrap.servers: localhost:9092
#spring.kafka.properties.schema.registry.url: http://localhost:8081

# Required connection configs for Kafka producer, consumer, and admin
spring.kafka.properties.sasl.mechanism: PLAIN
spring.kafka.properties.bootstrap.servers: pkc-zm3p0.eu-north-1.aws.confluent.cloud:9092
spring.kafka.properties.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule   required username='2NWPRH3TGKQ46O6Z'   password='XXX';
spring.kafka.properties.security.protocol: SASL_SSL

# Required for correctness in Apache Kafka clients prior to 2.6
spring.kafka.properties.client.dns.lookup: use_all_dns_ips

# Best practice for higher availability in Apache Kafka clients prior to 3.0
spring.kafka.properties.session.timeout.ms: 45000

# Best practice for Kafka producer to prevent data loss
spring.kafka.properties.acks: all

# Required connection configs for Confluent Cloud Schema Registry
spring.kafka.properties.basic.auth.credentials.source: USER_INFO
spring.kafka.properties.basic.auth.user.info: 4F3E32VPQ2DTLEEZ:XXX
spring.kafka.properties.schema.registry.url: https://psrc-lq3wm.eu-central-1.aws.confluent.cloud

spring:
  kafka:
    admin:
      client-id: online-orders-admin

    producer:
      client-id: online-orders-avro-producer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.encryption.serializers.avro.SecuredSpecificAvroSerializer
      properties:
        # configure the name of the symmetric encryption key that will be used to encrypt or decrypt the payload.
        value.serializer.key: PayloadKey
        # configure the top, or starting point, of the cipher provider chain. `provider` is just a name.
        encryption.provider.name: payload-key-supply
        # configure the cipher provider to be a cache that expires keys after 10 minutes.
        payload-key-supply.provider.class: io.confluent.encryption.common.crypto.cipher.impl.CachedCipherProvider
        payload-key-supply.provider.expiry: 10
        payload-key-supply.provider.name: aes-key-generator
        # configure the `generator` cipher provider. `GeneratorCipherProvider` will generate a key
        # if the next cipher provider in the chain does not have the encryption key.
        aes-key-generator.provider.class: io.confluent.encryption.common.crypto.cipher.impl.AESGeneratorCipherProvider

        # configure the name of the wrapping key that will encrypt the generated symmetric encryption key.
        value.serializer.wrapping.key: WrappingKey
        value.serializer.wrapping.key.provider.name": wrapping-key-supply
        # configure the `local` cipher provider, which stores encryption keys locally
        wrapping-key-supply.provider.class: io.confluent.encryption.common.crypto.cipher.impl.LocalCipherProvider
        wrapping-key-supply.provider.keys: WrappingKey
        wrapping-key-supply.provider.WrappingKey.key.type: PublicKey
        wrapping-key-supply.provider.WrappingKey.key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxEtVMbMtQksnD6oRlLdX4CXiRaQ+sOlZPAyhgEM5/t7UBUi9iRsTL+hIjFOOKqWyK0/CtuQW9RrjPzmA6smITaQXJHVv149sUo8Y0ZnlWbvI+sPRlrOpjsJrZff3dzcQdAFSC71GT0fUlRDpay8P0rVxubySwIfvXJDFnKppyou5Jnd4gB3C95Kd04JNexdyrVDArJ8kF6os9aMMmcukhDCplRS5tFQhN1VJuzCzTCZbzdAMkJKkHMnTJk47QJ1GoBFWm4Xdi0TazIuacgRtcIEE25/cCgEOndDeoa9n5qR3GKRylCwSlRAAwmy8IPFuNksjahT0ptgSyDZHNnDiFQIDAQAB

    consumer:
      group-id: online-orders-avro-consumer
      auto-offset-reset: earliest
      # By default, KafkaAvroDeserializerConfig.SPECIFIC_AVRO_READER_CONFIG is set to false,
      # so your KafkaAvroDeserializer will produce a GenericData by default, and not SpecificData (POJO).
      properties.specific.avro.reader: true
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.encryption.serializers.avro.SecuredSpecificAvroDeserializer
      properties:
        # configure the name of the symmetric encryption key that will be used to encrypt or decrypt the payload.
        value.deserializer.key: PayloadKey
        # configure the top, or starting point, of the cipher provider chain. `provider` is just a name.
        encryption.provider.name: payload-key-supply
        # configure the cipher provider to be a cache that expires keys after 10 minutes.
        payload-key-supply.provider.class: io.confluent.encryption.common.crypto.cipher.impl.CachedCipherProvider
        payload-key-supply.provider.expiry: 10
        payload-key-supply.provider.name: aes-key-generator
        # configure the `generator` cipher provider. `GeneratorCipherProvider` will generate a key
        # if the next cipher provider in the chain does not have the encryption key.
        aes-key-generator.provider.class: io.confluent.encryption.common.crypto.cipher.impl.AESGeneratorCipherProvider

        # configure the name of the wrapping key that will encrypt the generated symmetric encryption key.
        value.deserializer.wrapping.key: WrappingKey
        value.deserializer.wrapping.key.provider.name: wrapping-key-supply
        # configure the `local` cipher provider, which stores encryption keys locally
        wrapping-key-supply.provider.class: io.confluent.encryption.common.crypto.cipher.impl.LocalCipherProvider

        wrapping-key-supply.provider.keys: WrappingKey
        wrapping-key-supply.provider.WrappingKey.key.type: PrivateKey
        wrapping-key-supply.provider.WrappingKey.key: MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDES1Uxsy1CSycPqhGUt1fgJeJFpD6w6Vk8DKGAQzn+3tQFSL2JGxMv6EiMU44qpbIrT8K25Bb1GuM/OYDqyYhNpBckdW/Xj2xSjxjRmeVZu8j6w9GWs6mOwmtl9/d3NxB0AVILvUZPR9SVEOlrLw/StXG5vJLAh+9ckMWcqmnKi7kmd3iAHcL3kp3Tgk17F3KtUMCsnyQXqiz1owyZy6SEMKmVFLm0VCE3VUm7MLNMJlvN0AyQkqQcydMmTjtAnUagEVabhd2LRNrMi5pyBG1wgQTbn9wKAQ6d0N6hr2fmpHcYpHKULBKVEADCbLwg8W42SyNqFPSm2BLINkc2cOIVAgMBAAECggEBAJblglxubQBlXWXBSzqTps380XDPzhGZkKuE2jILe+3dxgc539oiIiHV4s9c/BD0x35cFkcaGDvbq43S2rOisVFeLxwr2wpOiur8bgvSzmio3ttG5TuAaXwBISaF9IqEnfVPfo7ftckEYvskwQtQZk2IhiBOQlIXLX5vHDpPFnxIjCfwDvtX5NpR+JWk4lhDLkOpuT1rx/aS4DIAnrvXMOO/M0VaTnBq5g8J2oOHghHM+aghgWx1+DdXej78QFs85e8aqCB9VQtOZToki/tt+j50zrDo9qRXSArMiSTzBBhQkQDWcCELMG3fEm+DN7TU8Mqg8IMXz7MEpAlyp46drZECgYEA4WkkP6sWWZErnE9igQ6VNh74ZIb/s2zWXDTHhvE0eGUDd9AZGqMSNXNgidEpU1iqtNImBp6GmsTkUrYreAo78Rhft8B6qxjoZccBcXjxvku2xKki+Nlk2vs6rj8IrlQp6jpFP+DrF0tKz9k0KSvngaXRyDf7kAmuwfMXHr4mBkMCgYEA3u6so7TwzwlmE5Zjr5N8P30hJrcrMP7rhXFcODdJR/5UfRfSXJGbPTMytty+95fcQyNyCfCLx2vGwu4+NJIKvczMMJ1EXW6VXao1RRVQxSdv6xXkPrq7j+HRAujcIpPGtAyTGsJmWk367iDnj3s0S2fLO1hudiP1Y4qtC6RPrMcCgYEAq7bR82Kc+wxZAZGEA7adOoZrSQGCZygBQGrAmO7EvvaMpsgzZ5RUeb10DGj3J1QDbw4sA5zeA6b8HHpEMQTy1t5vhGavzAmEeIwacFvnJMU+7R+/0XyilSMPd8/zCAJ7j8BmIpxv2uXzjtTzJG4axSwR3ImxLPADXiKWOUg3ZUsCgYBkT37tFrC4aCE/NQ9b5IAmzTYKhqbvn/T4EX8OaIoX0+/ObdahAn+YtR3fvEpNfE6HAz8AC/XJYMyJz8u7ue8NYkaKpWkqpWSeRcU8dY/ndoxceng+ZaWZ42E57u+Gu3nQcEwM4WZOwgHj/nhTTnvEZkrDRFJH5Hw5MyAUOfYD5wKBgQDQjyix8uBO6ReITGSAIH2F9xmn04dtLODTe3cHOk+fVzhmJlHy9jzbsNQ8A5Vd01gaYRaMUe8uEWUQx97xKN6HIEiKKf/IdKrIL75yTKuNFv6aUNbiryGu4PDE/iz1Hb1t8Wkjqfq37k8SrkjiqDEYjxVh3gCMEvtA+xl2svXvjg==

    streams:
      application-id: online-orders-processor
      properties.num.stream.threads: 3
      properties.commit.interval.ms: 100
      properties.state.dir: /tmp/kafka-streams
      properties.state.cleanup.delay.ms: 600000
      properties.auto-offset-reset: earliest
      properties.default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      properties.default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
